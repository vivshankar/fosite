// Copyright Â© 2024 Ory Corp
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: handler/rfc8628/storage.go

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fosite "github.com/ory/fosite"
)

// MockRFC8628CodeStorage is a mock of RFC8628CodeStorage interface.
type MockRFC8628CodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRFC8628CodeStorageMockRecorder
}

// MockRFC8628CodeStorageMockRecorder is the mock recorder for MockRFC8628CodeStorage.
type MockRFC8628CodeStorageMockRecorder struct {
	mock *MockRFC8628CodeStorage
}

// NewMockRFC8628CodeStorage creates a new mock instance.
func NewMockRFC8628CodeStorage(ctrl *gomock.Controller) *MockRFC8628CodeStorage {
	mock := &MockRFC8628CodeStorage{ctrl: ctrl}
	mock.recorder = &MockRFC8628CodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC8628CodeStorage) EXPECT() *MockRFC8628CodeStorageMockRecorder {
	return m.recorder
}

// CreateDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) CreateDeviceCodeSession(ctx context.Context, signature string, request fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceCodeSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeviceCodeSession indicates an expected call of CreateDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) CreateDeviceCodeSession(ctx, signature, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).CreateDeviceCodeSession), ctx, signature, request)
}

// CreateUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) CreateUserCodeSession(ctx context.Context, signature string, request fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCodeSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserCodeSession indicates an expected call of CreateUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) CreateUserCodeSession(ctx, signature, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).CreateUserCodeSession), ctx, signature, request)
}

// GetDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) GetDeviceCodeSession(ctx context.Context, signature string, session fosite.Session) (fosite.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCodeSession indicates an expected call of GetDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) GetDeviceCodeSession(ctx, signature, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).GetDeviceCodeSession), ctx, signature, session)
}

// GetUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) GetUserCodeSession(ctx context.Context, signature string, session fosite.Session) (fosite.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCodeSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCodeSession indicates an expected call of GetUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) GetUserCodeSession(ctx, signature, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).GetUserCodeSession), ctx, signature, session)
}

// InvalidateDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) InvalidateDeviceCodeSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateDeviceCodeSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateDeviceCodeSession indicates an expected call of InvalidateDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) InvalidateDeviceCodeSession(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).InvalidateDeviceCodeSession), ctx, signature)
}

// InvalidateUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) InvalidateUserCodeSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserCodeSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserCodeSession indicates an expected call of InvalidateUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) InvalidateUserCodeSession(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).InvalidateUserCodeSession), ctx, signature)
}

// UpdateDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) UpdateDeviceCodeSession(ctx context.Context, signature string, request fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceCodeSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceCodeSession indicates an expected call of UpdateDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) UpdateDeviceCodeSession(ctx, signature, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).UpdateDeviceCodeSession), ctx, signature, request)
}

// UpdateUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) UpdateUserCodeSession(ctx context.Context, signature string, req fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCodeSession", ctx, signature, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCodeSession indicates an expected call of UpdateUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) UpdateUserCodeSession(ctx, signature, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).UpdateUserCodeSession), ctx, signature, req)
}

// MockDeviceCodeStorage is a mock of DeviceCodeStorage interface.
type MockDeviceCodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceCodeStorageMockRecorder
}

// MockDeviceCodeStorageMockRecorder is the mock recorder for MockDeviceCodeStorage.
type MockDeviceCodeStorageMockRecorder struct {
	mock *MockDeviceCodeStorage
}

// NewMockDeviceCodeStorage creates a new mock instance.
func NewMockDeviceCodeStorage(ctrl *gomock.Controller) *MockDeviceCodeStorage {
	mock := &MockDeviceCodeStorage{ctrl: ctrl}
	mock.recorder = &MockDeviceCodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceCodeStorage) EXPECT() *MockDeviceCodeStorageMockRecorder {
	return m.recorder
}

// CreateDeviceCodeSession mocks base method.
func (m *MockDeviceCodeStorage) CreateDeviceCodeSession(ctx context.Context, signature string, request fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceCodeSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeviceCodeSession indicates an expected call of CreateDeviceCodeSession.
func (mr *MockDeviceCodeStorageMockRecorder) CreateDeviceCodeSession(ctx, signature, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceCodeSession", reflect.TypeOf((*MockDeviceCodeStorage)(nil).CreateDeviceCodeSession), ctx, signature, request)
}

// GetDeviceCodeSession mocks base method.
func (m *MockDeviceCodeStorage) GetDeviceCodeSession(ctx context.Context, signature string, session fosite.Session) (fosite.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCodeSession indicates an expected call of GetDeviceCodeSession.
func (mr *MockDeviceCodeStorageMockRecorder) GetDeviceCodeSession(ctx, signature, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSession", reflect.TypeOf((*MockDeviceCodeStorage)(nil).GetDeviceCodeSession), ctx, signature, session)
}

// InvalidateDeviceCodeSession mocks base method.
func (m *MockDeviceCodeStorage) InvalidateDeviceCodeSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateDeviceCodeSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateDeviceCodeSession indicates an expected call of InvalidateDeviceCodeSession.
func (mr *MockDeviceCodeStorageMockRecorder) InvalidateDeviceCodeSession(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateDeviceCodeSession", reflect.TypeOf((*MockDeviceCodeStorage)(nil).InvalidateDeviceCodeSession), ctx, signature)
}

// UpdateDeviceCodeSession mocks base method.
func (m *MockDeviceCodeStorage) UpdateDeviceCodeSession(ctx context.Context, signature string, request fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceCodeSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceCodeSession indicates an expected call of UpdateDeviceCodeSession.
func (mr *MockDeviceCodeStorageMockRecorder) UpdateDeviceCodeSession(ctx, signature, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceCodeSession", reflect.TypeOf((*MockDeviceCodeStorage)(nil).UpdateDeviceCodeSession), ctx, signature, request)
}

// MockUserCodeStorage is a mock of UserCodeStorage interface.
type MockUserCodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserCodeStorageMockRecorder
}

// MockUserCodeStorageMockRecorder is the mock recorder for MockUserCodeStorage.
type MockUserCodeStorageMockRecorder struct {
	mock *MockUserCodeStorage
}

// NewMockUserCodeStorage creates a new mock instance.
func NewMockUserCodeStorage(ctrl *gomock.Controller) *MockUserCodeStorage {
	mock := &MockUserCodeStorage{ctrl: ctrl}
	mock.recorder = &MockUserCodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCodeStorage) EXPECT() *MockUserCodeStorageMockRecorder {
	return m.recorder
}

// CreateUserCodeSession mocks base method.
func (m *MockUserCodeStorage) CreateUserCodeSession(ctx context.Context, signature string, request fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCodeSession", ctx, signature, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserCodeSession indicates an expected call of CreateUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) CreateUserCodeSession(ctx, signature, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).CreateUserCodeSession), ctx, signature, request)
}

// GetUserCodeSession mocks base method.
func (m *MockUserCodeStorage) GetUserCodeSession(ctx context.Context, signature string, session fosite.Session) (fosite.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCodeSession", ctx, signature, session)
	ret0, _ := ret[0].(fosite.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCodeSession indicates an expected call of GetUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) GetUserCodeSession(ctx, signature, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).GetUserCodeSession), ctx, signature, session)
}

// InvalidateUserCodeSession mocks base method.
func (m *MockUserCodeStorage) InvalidateUserCodeSession(ctx context.Context, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserCodeSession", ctx, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserCodeSession indicates an expected call of InvalidateUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) InvalidateUserCodeSession(ctx, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).InvalidateUserCodeSession), ctx, signature)
}

// UpdateUserCodeSession mocks base method.
func (m *MockUserCodeStorage) UpdateUserCodeSession(ctx context.Context, signature string, req fosite.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCodeSession", ctx, signature, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCodeSession indicates an expected call of UpdateUserCodeSession.
func (mr *MockUserCodeStorageMockRecorder) UpdateUserCodeSession(ctx, signature, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCodeSession", reflect.TypeOf((*MockUserCodeStorage)(nil).UpdateUserCodeSession), ctx, signature, req)
}
